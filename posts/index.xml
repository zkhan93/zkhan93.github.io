<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Zeeshan Khan</title><link>https://zkhan.in/posts/</link><description>Recent content in Posts on Zeeshan Khan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Dec 2021 13:46:58 +0530</lastBuildDate><atom:link href="https://zkhan.in/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Game of Life</title><link>https://zkhan.in/posts/game-of-life/</link><pubDate>Thu, 09 Dec 2021 13:46:58 +0530</pubDate><guid>https://zkhan.in/posts/game-of-life/</guid><description>The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. for more detail check Wikipedia In short, the game is a 2D grid that has the following rules Game Rules Any live cell with fewer than two live neighbours dies, as if by underpopulation. Any live cell with two or three live neighbours lives on to the next generation.</description></item><item><title>Serializing &amp; Deserializing Binary Tree</title><link>https://zkhan.in/posts/serializing-deserializing-binary-tree/</link><pubDate>Thu, 09 Dec 2021 13:46:58 +0530</pubDate><guid>https://zkhan.in/posts/serializing-deserializing-binary-tree/</guid><description>We are going to serialize a binary tree to an array, A binary tree is a tree data structure. Each node can have 0-2 children(s).
visualization of a binary tree
2 / \ / \ / \ 1 3 / \ / \ 0 7 9 1 / / \ / \ 2 1 0 8 8 Representation of a Node A node should contain the data(value) and reference to child nodes.</description></item><item><title>Serverless Invoice Generation</title><link>https://zkhan.in/posts/system/serverless-invoice/</link><pubDate>Sun, 28 Nov 2021 18:53:55 +0530</pubDate><guid>https://zkhan.in/posts/system/serverless-invoice/</guid><description>One of my non-techie friends was starting a new business and he wanted an Invoicing System. he reached out to me hoping that I can help him with a small website or app
Open Source Software to rescue If this was me a couple of years earlier I would have started the typical Software Development Life Cycle for a new project, but this new me is lazy. So, I searched the web to find a decent open-source project that can fulfil his needs for now, I came across this project it looked very interesting to me, it was using LaTeX to generate the invoice since I had no experience in the tools I refrained to use it (although I would love to explore it).</description></item><item><title>Conky - Lightweight System Monitor</title><link>https://zkhan.in/posts/system/conky-setup/</link><pubDate>Sat, 27 Nov 2021 11:22:01 +0530</pubDate><guid>https://zkhan.in/posts/system/conky-setup/</guid><description>I use ubuntu as my daily driver so all the commands are going to be ubuntu/debian based
Installation Install conky-all package by sudo apt-get install conky-all
Setup conky takes a config file to know what to draw on screen. the default location of config file is ~/.conkyrc
Run you can start the conky by just typing conky in terminal, and a and ugly black window should come up.
Customization There are thousands of options to pick conky config, and if that&amp;rsquo;s not enough you can just google for more.</description></item><item><title>Understanding Linux load average</title><link>https://zkhan.in/posts/understanding-linux-load-average/</link><pubDate>Fri, 26 Nov 2021 21:48:41 +0530</pubDate><guid>https://zkhan.in/posts/understanding-linux-load-average/</guid><description>&amp;gt;&amp;gt;&amp;gt; uptime 09:20:04 up 13:22, 5 users, load average: 0.11, 0.31, 0.42 Load average are those three number, its these to give and idea of how busy the system is.
It shows load for last 1, 5 and 15 mins, A common misconception is that it just shows how busy the CPU is, however it also takes other IO operation into consideration.
This blog post explains it beautifully what those three numbers mean</description></item><item><title>Factorial in C using Character array</title><link>https://zkhan.in/posts/c/factorial-in-c-using-array/</link><pubDate>Wed, 15 Jun 2016 05:53:34 +0000</pubDate><guid>https://zkhan.in/posts/c/factorial-in-c-using-array/</guid><description>Hey Guys, wondering why I am here once again with this &amp;ldquo;factorial&amp;rdquo; thing? You will get to know it in no time..just keep reading!Let&amp;rsquo;s calculate some of the factorials:
1! = 12! = 23! = 64! = 245! = 1206! = 720
well there is no problem, isn&amp;rsquo;t it?Continue then&amp;hellip;
7! = 50408! = 40320
Now let&amp;rsquo;s look at 21! It is 51090942171709440000
Here comes the problem, in languages like C we need to keep an eye on the size of the variables.</description></item><item><title>Factorial in C</title><link>https://zkhan.in/posts/c/factorial-in-c/</link><pubDate>Wed, 01 Jun 2016 04:26:00 +0000</pubDate><guid>https://zkhan.in/posts/c/factorial-in-c/</guid><description>Hey! Today i am gonna show you how to calculate factorial of a number. The code below depicts the basic methodology of how to calculate factorial of a number.
# include&amp;lt;stdio.h&amp;gt; void factorial(int number){ int i; long long int factorial=1; for ( i = number ; i &amp;gt; 0 ; i-- ) factorial*=i; // Printing the factorial of the number **/ printf(&amp;#34;Factorial of %d = %lld&amp;#34;,number,factorial); return 0; } int main(){ // Declaring variables **/ int num; // Asking and scanning input **/ printf(&amp;#34;Enter a number : &amp;#34;); scanf(&amp;#34;%d&amp;#34;,&amp;amp;num); // Passing number to the function **/ factorial(num); return 0; } output of above code will be</description></item><item><title>Linked List in C</title><link>https://zkhan.in/posts/c/linked-list-in-c/</link><pubDate>Mon, 23 Nov 2015 15:24:00 +0000</pubDate><guid>https://zkhan.in/posts/c/linked-list-in-c/</guid><description>First let&amp;rsquo;s get familiar with some basic terminologies used in linked list.
A linked list is a type of array in which each elements points to the next element. Each element in the list is called a node The very first node of the list is called the root node or head of the list. Linked list is represented only by the root node i.e., we store only the pointer to the root node.</description></item><item><title>How To Scan Input In Java</title><link>https://zkhan.in/posts/java/how-to-scan-input-in-java/</link><pubDate>Tue, 03 Feb 2015 10:14:51 +0000</pubDate><guid>https://zkhan.in/posts/java/how-to-scan-input-in-java/</guid><description>The best way to scan input in java includes the use of BufferedReader class, another method uses Scanner class but is slower, so here we will prefer BufferedReader.
The following code demonstrate the use of BufferedReader for scanning input of different type.
// file ScanInput.java import java.io.*; public class ScanInput{ public static void main(String args[]) throws IOException{ BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); System.out.print(&amp;#34;Enter a String: &amp;#34;); String msg=br.readLine(); System.out.print(&amp;#34;Enter a Integer: &amp;#34;); int integer=Integer.</description></item><item><title>Faster Input Scan Method in C</title><link>https://zkhan.in/posts/c/fast-input-scan-method-in-c/</link><pubDate>Mon, 26 Jan 2015 08:03:44 +0000</pubDate><guid>https://zkhan.in/posts/c/fast-input-scan-method-in-c/</guid><description>Sometimes we need to scan input really fast like when we are participating in coding competitions like codechef or SPOJ where the time limit is very strict and inputs are large, we can save some time by adopting faster scanning methods.
We can achieve our gaol using getchar_unlocked function.
code below scans 100000 integers and has two different methods one is scan_normal() this will scan integers using standard scanf() function and the other one is scan_fast() this scan integers using getchar_unlocked function, we will execute the program twice one for each method mark the time taken for execution to evaluate the performance.</description></item><item><title>How To Run a Java Program</title><link>https://zkhan.in/posts/java/how-to-run-java-program/</link><pubDate>Sat, 24 Jan 2015 11:37:21 +0000</pubDate><guid>https://zkhan.in/posts/java/how-to-run-java-program/</guid><description>To run a java program you must have one, so lets have a sample code which prints &amp;ldquo;Hello world!!&amp;rdquo; to console.
Source Code If you have source code ready then ignore else create a new file Hello.java and copy the below code in it and save it.
Source code
// file Hello.java import java.io.*; class Hello{ public static void main(String args[]){ System.out.println(&amp;#34;Hello World!!&amp;#34;); } } now you have your source code ready,</description></item><item><title>Client Server in Java</title><link>https://zkhan.in/posts/java/client-server-in-java/</link><pubDate>Wed, 21 Jan 2015 00:42:53 +0000</pubDate><guid>https://zkhan.in/posts/java/client-server-in-java/</guid><description>&lt;p>The following program demonstrate how we can implement simple client server architecture in java
Start &lt;code>Server.java&lt;/code> in a terminal/command prompt then open another command prompt/terminal and start &lt;code>Client.java&lt;/code> in it
Server can handle new Clients on disconnection of previous one.&lt;/p></description></item><item><title>ArrayList in java</title><link>https://zkhan.in/posts/java/arraylist-in-java/</link><pubDate>Thu, 08 Jan 2015 06:35:36 +0000</pubDate><guid>https://zkhan.in/posts/java/arraylist-in-java/</guid><description>ArrayList is a collection of data items that grows and shrinks depending on the number of data items present in it, you can think it as a dynamic array or a link lists in C, whose size increases when we insert a data and decreases as delete some data from it.
To insert a data item we use add() method and to delete we use remove() method as demonstrated below in line 13 and 20 respectively.</description></item><item><title>File Handling in C</title><link>https://zkhan.in/posts/c/file-hadling-in-c/</link><pubDate>Sat, 03 Jan 2015 02:11:00 +0000</pubDate><guid>https://zkhan.in/posts/c/file-hadling-in-c/</guid><description>&lt;p>The following program demonstrate how we to perform read and write operations on files,&lt;/p>
&lt;p>We can create and open a file &lt;code>w+&lt;/code> (write plus) mode, this will open a file if it exists otherwise create a new file and open it in write mode&lt;/p></description></item><item><title>Dynamic array in C</title><link>https://zkhan.in/posts/c/dynamic-array-in-c/</link><pubDate>Fri, 02 Jan 2015 07:57:00 +0000</pubDate><guid>https://zkhan.in/posts/c/dynamic-array-in-c/</guid><description>Dynamic array is a array that has a fixed number of items on it, but the space required for data storage is alloted at runtime on data input.
The code below will demonstrate how we can use dynamic array in C
# include&amp;lt;stdio.h&amp;gt; # include&amp;lt;stdlib.h&amp;gt; int main() { int *arr[10], i; printf(&amp;#34;Enter 10 numbers\n&amp;#34;); for(i = 0; i &amp;lt; 10; i++){ //asking for space to store an int arr[i] = (int*) malloc(sizeof(int)); scanf(&amp;#34;%d&amp;#34;, arr[i]); } printf(&amp;#34;the array you entered is &amp;#34;); for(i = 0; i &amp;lt; 10; i++){ printf(&amp;#34;%d &amp;#34;, *arr[i]); //returning memory to system free(arr[i]); } printf(&amp;#34;\n&amp;#34;); return 0; } The above code will produce the following output</description></item><item><title>Pointers in C</title><link>https://zkhan.in/posts/c/pointers-in-c/</link><pubDate>Fri, 02 Jan 2015 07:39:00 +0000</pubDate><guid>https://zkhan.in/posts/c/pointers-in-c/</guid><description>Pointers are variables that stores the reference (address) of a data value, datatype of pointers represent what kind of values they can hold reference of, however, a pointer of type void can hold reference of any datatype, but explicitly type casting is required to use them.
The code below will demonstrate how we can use pointers in C
# include&amp;lt;stdio.h&amp;gt; int main(){ int *pnum, num; printf(&amp;#34;Enter a number\n&amp;#34;); scanf(&amp;#34;%d&amp;#34;, &amp;amp;num); pnum = &amp;amp;num; // now you can modify the value from pnum as well as num.</description></item><item><title>Array in C</title><link>https://zkhan.in/posts/c/array-in-c/</link><pubDate>Thu, 01 Jan 2015 11:04:00 +0000</pubDate><guid>https://zkhan.in/posts/c/array-in-c/</guid><description>Arrays in C are collection of values that have same data types.
The code below initializes and assigns values to an each position in an array
# include&amp;lt;stdio.h&amp;gt; int main(){ int arr[10]; int i; printf(&amp;#34;Enter 10 numbers\n&amp;#34;); for(i=0;i&amp;lt;10;i++){ scanf(&amp;#34;%d&amp;#34;,&amp;amp;arr[i]); } printf(&amp;#34;the array you entered is\n&amp;#34;); for(i=0;i&amp;lt;10;i++){ printf(&amp;#34;%d &amp;#34;,arr[i]); } printf(&amp;#34;\n&amp;#34;); return 0; } Output:
Enter 10 numbers 1 2 3 4 5 6 7 8 9 10 the array you entered is 1 2 3 4 5 6 7 8 9 10 &amp;#39;&amp;#39;&amp;#39;</description></item><item><title>Bitwise operations in C</title><link>https://zkhan.in/posts/c/bitwise-operator-in-c/</link><pubDate>Thu, 01 Jan 2015 04:26:00 +0000</pubDate><guid>https://zkhan.in/posts/c/bitwise-operator-in-c/</guid><description>Bitwise operators in C are
&amp;amp; AND Operator | OR Operator ~ NOT Operator ^ XOR Operator The code below demonstrate common bitwise operations in c
# include&amp;lt;stdio.h&amp;gt; int main(){ int a, b, option, res; printf(&amp;#34;Enter a and b\n&amp;#34;); scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b); do{ printf(&amp;#34;MENU\n1.AND\n2.OR\n3.NOT \n4.XOR\n0.Exit\n&amp;#34;); printf(&amp;#34;Enter choice: &amp;#34;); scanf(&amp;#34;%d&amp;#34;, &amp;amp;option); switch(option){ case 1: res = a &amp;amp; b; printf(&amp;#34;%d AND %d = %d\n&amp;#34;, a, b, res); break; case 2: res = a | b; printf(&amp;#34;%d OR %d = %d\n&amp;#34;, a, b, res); break; case 3: res = ~a; printf(&amp;#34;NOT of %d = %d\n&amp;#34;, a, res); res = ~b; printf(&amp;#34;NOT of %d = %d\n&amp;#34;, b, res); break; case 4: res = a ^ b; printf(&amp;#34;%d XOR %d = %d\n&amp;#34;, a, b, res); break; default: break; } printf(&amp;#34;\n&amp;#34;); }while(option); return 0; } Output:</description></item><item><title>Swap Two Numbers in C</title><link>https://zkhan.in/posts/c/swap-two-numbers-in-c/</link><pubDate>Tue, 30 Dec 2014 04:26:00 +0000</pubDate><guid>https://zkhan.in/posts/c/swap-two-numbers-in-c/</guid><description>Code below swaps two numbers without using a third variable
# include&amp;lt;stdio.h&amp;gt; int swap(int* a, int *b){ // swapping values using match trick *a = *a + *b; *b = *a - *b; *a = *a - *b; return 0; } int main(){ int a, b; printf(&amp;#34;Enter two numbers&amp;#34;); scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;a, &amp;amp;b); printf(&amp;#34;a=%d, b=%d&amp;#34;, a, b); swap(&amp;amp;a, &amp;amp;b); printf(&amp;#34;a=%d, b=%d&amp;#34;, a, b); return 0; } Output:
Enter two numbers 10 34 before swapping a=10, b=34 After swapping a=34, b=10</description></item><item><title>Add Two Numbers in C</title><link>https://zkhan.in/posts/c/add-two-numbers-in-c/</link><pubDate>Sun, 28 Dec 2014 20:04:04 +0000</pubDate><guid>https://zkhan.in/posts/c/add-two-numbers-in-c/</guid><description>To add two numeric values in C
#include&amp;lt;stdio.h&amp;gt; int main(){ float a, b; printf(&amp;#34;Enter two numbers\n&amp;#34;); scanf(&amp;#34;%f %f&amp;#34;,&amp;amp;a,&amp;amp;b); printf(&amp;#34;sum of %f and %f is %f&amp;#34;,a,b,a+b); return 0; } Output:
Enter two numbers 12 34 sum of 12.000000 and 34.000000 is 46.000000</description></item><item><title>Add Two Integers in Java</title><link>https://zkhan.in/posts/java/add-two-numbers-in-java/</link><pubDate>Sun, 28 Dec 2014 08:04:04 +0000</pubDate><guid>https://zkhan.in/posts/java/add-two-numbers-in-java/</guid><description>Following program will add two Integer numbers for you.
// file Addition.java import java.io.*; class Addition{ public static void main(String args[]) throws IOException{ int a,b; BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); System.out.println(&amp;#34;Enter first integer&amp;#34;); a=Integer.parseInt(br.readLine()); System.out.println(&amp;#34;Enter second integer&amp;#34;); b=Integer.parseInt(br.readLine()); System.out.println(&amp;#34;Sum of two integers is: &amp;#34;+(a+b)); } } To run the above code navigate to the source code folder from cmd(Windows) or terminal(Linux) then type the following code to compile javac &amp;lt;filename&amp;gt;.java after sucessfully compiling, type java Addition to start the programe.</description></item></channel></rss>