[{"content":"\u0026gt;\u0026gt;\u0026gt; uptime 09:20:04 up 13:22, 5 users, load average: 0.11, 0.31, 0.42 Load average are those three number, its these to give and idea of how busy the system is.\nIt shows load for last 1, 5 and 15 mins, A common misconception is that it just shows how busy the CPU is, however it also takes other IO operation into consideration.\nThis blog post explains it beautifully what those three numbers mean ","permalink":"https://zkhan.in/posts/understanding-linux-load-average/","summary":"\u0026gt;\u0026gt;\u0026gt; uptime 09:20:04 up 13:22, 5 users, load average: 0.11, 0.31, 0.42 Load average are those three number, its these to give and idea of how busy the system is.\nIt shows load for last 1, 5 and 15 mins, A common misconception is that it just shows how busy the CPU is, however it also takes other IO operation into consideration.\nThis blog post explains it beautifully what those three numbers mean ","title":"Understanding Linux load average"},{"content":"I was an average student during my schooling. I somehow managed to survive long enough to get introduced to computer science subject in 11th, the subject was to teach C programming language, at first my mind start asking too many question, I told some of them to my teacher on which she said \u0026ldquo;Just accept what is being told this is the basic information that you will need to start thinking in C\u0026rdquo;, I absorbed few initial chapters and it started making sense once we got started with coding, I learnt few things, it started to feel like a super power I had, I can ask a computer to do something for me :), I was happy and eager to learn more but then session got over.\nAfter schooling I was not sure what to do next, My dear friend Rohit told me to take this exam called AIEEE and IIT-JEE, yes I didn\u0026rsquo;t know what were these, and so I didn\u0026rsquo;t clear it, dropped for a year to prepare still same result, My elder brother told me to take admission in the nearby college affiliated to state university.\nEngineering I choose B.Tech in Computer Science \u0026amp; Engineering, first year seems like a Déjà vu similar subjects from schooling, however I realized I was good in Chemistry and Mechanics, like always I wasn\u0026rsquo;t able to score much but I think I can say I was doing above average. In subsequent years the computer science subjects came and man! they came in hot. Few of them that I remember were Computer Systems, Digital Logic Design, Data Structures, Graph Theory, etc. I was able to grasp these partially, enough to clear the exams, some of these were made easy for me by few good faculties we had.\nWe had practical for some subjects like Data Structures, so in lab we were suppose to write a program that was taught in the class then try to execute it, In the lab I would write my program and try to compile it, most of the time when there are errors in compilation the error messages were making sense to me, but some of my friends were struggling to fix theirs then they will give up and ask others to fix it.\nThinking back, now I realize it was funny how less we actually interacted with computers despite being in a CSE student.\nLuckily my parent got me a desktop system and I started to code in C and Java on my own, Internet was not readily available in my city back then, somehow I managed to get a internet connection, The internet opened my eye, it was filled with information about technologies and languages and I was struggling to compile my 10 lines of code, I felt outdated already.\nI was clearly missing out on guidance, while seeking that I got to know about competitive programming, I started solving some basic problems on CodeChef, it gave me some confidence and sense of why I should be optimizing my code, I could feel a small knowledge graph being build up in my mind with the practical knowledge from theory classes.\nMy curiosity to build things helped me and I built few Java applications, one of them was a game called \u0026ldquo;sink the ship\u0026rdquo; I used Java Swing to build it, I wrote 10000 lines of C code to create a k-map solver, it was working of all the tests we could think of, but it was basically a lot of if conditions.\nI got my first Android phone, it was an Sony Xperia Mini REST and Android was a new thing that I learned about, so I decided to take my final college project seriously and create an Android application for our college the idea presented was that faculties and students will be able to log in, chat and share docs, It was a team project so I had a partner to work with she was very smart and helped a lot in completing the project, the document sharing feature was dropped since it was too much for us. The project submissions were evaluated by external faculty, I\u0026rsquo;m not sure how much I was able to explain to him, but he really didn\u0026rsquo;t care if it ran, he asked few questions so that he can rate us and later assign marks to that ratings.\nThe end of college life was near, it was time to start looking for jobs. Some companies came they had screening round which were basically math and quants questions, I was not able to clear few them, others I got rejected in interview mainly because I was not very good at communicating and the rest of them wanted to hear the exact answers they think was right. overall result was I didn\u0026rsquo;t get selected in campus placements. It was not a great feeling, but after few weeks TCS came to a nearby college and they were accepting candidates from other colleges also, I though this is my last chance to get a job, I prepared by what ever I could, after few online/offline test and multiple rounds of interview I got selected in TCS. I was happy.\nTata Consultancy Services  Trivananthpuram training  class good performer, helped few friends from other background went on one trip enrolled in Innovation labs base location mess top 10 percent got base location landed in Lucknow    J.P Morgan Amadeus Software Labs Morgan Stanley OR\nBetter Works ","permalink":"https://zkhan.in/posts/draft/5yrs-in-indian-it-sector/","summary":"I was an average student during my schooling. I somehow managed to survive long enough to get introduced to computer science subject in 11th, the subject was to teach C programming language, at first my mind start asking too many question, I told some of them to my teacher on which she said \u0026ldquo;Just accept what is being told this is the basic information that you will need to start thinking in C\u0026rdquo;, I absorbed few initial chapters and it started making sense once we got started with coding, I learnt few things, it started to feel like a super power I had, I can ask a computer to do something for me :), I was happy and eager to learn more but then session got over.","title":"5 Years in IT sector (India)"},{"content":"","permalink":"https://zkhan.in/posts/draft/setup_ebook_server_caliber/","summary":"","title":"Setup your own E-book server Caliber"},{"content":"Vuejs was easy to get started with, so I picked it up for my new project idea was to finally compile into a single page application, completely static I was happy with the result, but SEO and link sharing was not working as expected, since all the dynamic data was pulled after but soon SEO became the requirement SSR was too much rework looked for alternative Nuxt was there but again that meant lot of rework and re-structuring then I thought why to filter the traffic from bots (mainly the platforms where the links were going to be shared) created a small flask app to handle that traffic and return proper meta tags added nginx config to send traffic to flask app based on user agents and voila!!\n","permalink":"https://zkhan.in/posts/draft/vuejs_seo_without_ssr/","summary":"Vuejs was easy to get started with, so I picked it up for my new project idea was to finally compile into a single page application, completely static I was happy with the result, but SEO and link sharing was not working as expected, since all the dynamic data was pulled after but soon SEO became the requirement SSR was too much rework looked for alternative Nuxt was there but again that meant lot of rework and re-structuring then I thought why to filter the traffic from bots (mainly the platforms where the links were going to be shared) created a small flask app to handle that traffic and return proper meta tags added nginx config to send traffic to flask app based on user agents and voila!","title":"Vuejs SEO without ssr using nginx"},{"content":"","permalink":"https://zkhan.in/posts/draft/dynamic-queue/","summary":"","title":"Queue Implementation in C"},{"content":"Typically stacks are like arrays, the difference is in a stack addition and deletion operations are performed from one end, this end is called top.\nLet\u0026rsquo;s have a look at stack terminology\n###Top A pointer to top most item is called top of the stack, all operations are performed on top of the stack.\n###Push Pushing a item into stack means inserting a new item to the top of stack.\n###Pop Poping from stack means removing the top most item from stack.\n###Function list\nlet\u0026rsquo;s look at the code below, we have 5 function\n getNewNode() -\u0026gt; to create a new node push() -\u0026gt; to perform push operation on stack pop() -\u0026gt; top perform pop operation on stack printStack() -\u0026gt; to print the stack freeStack() -\u0026gt; free up the allocated memories for stack main() -\u0026gt; main method to check functions we created work as required  Apart from functions we have a structure stack_node which represent an item in our stack.\n###getNewNode() This function takes a interger value as input and return pointer to a new node of type stack_node, it uses the malloc() funtion from stdlib.h header file to get a pointer to memory for new node\n###push() This function takes pointer of a pointer who points to the stack\u0026rsquo;s top most item (you may want to read it again, slowly!), and an integer value for the new node, it adds (formally pushes) a new stack_node to the stack.\n###pop() This function takes pointer of a pointer who points to the stack\u0026rsquo;s top most item, it returns the value of top most item and delete that item from the stack\n###printStack() This function takes a pointer who points to stacks top most node, and prints all the items present in the stack.\n###freeStack() This function releases memory allocated for stack items, it uses recursive function call to achieve its goal.\n###main() This function calls all the other method to demonstrate the working of stack implementation.\n###Code {% highlight c linenos %} #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt;\n/**\n Structure of node for stack */ typedef struct stack_node{ int value; struct stack_node previous; }stack_node;  /**\n get a new stack_node from free memory pool with the provided value / stack_node getNewNode(int value){ //get memory from free pool using malloc stack_node new_node=(stack_node*)malloc(sizeof(stack_node)); //assign given value to the new node new_node-\u0026gt;value=value; //prevoius pointer points to null new_node-\u0026gt;previous='\\0'; //return the new node return new_node; }  /**\n add new item to the top of the stack (Push) / void push(stack_node stack,int value){ //create a node with given value stack_node* new_node=getNewNode(value); if(*stack=='\\0'){ //if stack is empty assign the new node as top most item *stack=new_node; return; } //new node points to the stack top new_node-\u0026gt;previous=*stack; //new node is the top most item in stack *stack=new_node; }  /**\n remove the top most item from stack and return its value (Pop) / int pop(stack_node stack){ //check for empty stack if((stack)=='\\0'){ printf(\u0026quot;\\nSTACK UNDERFLOW\\n\u0026quot;); return; } //hold a pointer to top most item stack_node top_node=*stack; //assign the stack(top) pointer to the second item in the stack *stack=(*stack)-\u0026gt;previous; //store the value of top most node before marking it as free int value=top_node-\u0026gt;value; //free the top most node free(top_node); //return the value of top most node return value; }  /**\n Print the current state of the stack */ void printStack(stack_node stack){ if(stack=='\\0'){ //if stack is empty printf(\u0026quot;\\nEMPTY STACK\\n\u0026quot;); return; } printf(\u0026quot;\\n\u0026mdash;\u0026mdash;START\u0026mdash;\u0026mdash;\u0026ndash;\\n\u0026quot;); //loop til current node is not null while(stack!='\\0'){ //print stack\u0026rsquo;s current node value printf(\u0026quot;%d\\n\u0026quot;,stack-\u0026gt;value); //move to lower node stack=stack-\u0026gt;previous; } printf(\u0026quot;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;END\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\\n\u0026quot;); }  /**\n free all the nodes linked with the stack */ void freeStack(stack_node stack){ if(stack=='\\0') return; //if we have a node attached to the current one, then release the attached node first if(stack-\u0026gt;previous!='\\0') freeStack(stack-\u0026gt;previous); free(stack); }  /**\n Main driver method to check functions */ int main(){ stack_node stack='\\0'; int i=0,j=0; //push 10 items to stack for(i=1;i\u0026lt;=10;i++){ push(\u0026amp;stack,i); printStack(stack); } //pop 5 items for(j=0;j\u0026lt;5;j++){ //print poped value printf(\u0026quot;\\n%d poped\\n\u0026quot;,pop(\u0026amp;stack)); printStack(stack); } //push 5 more items for(;i\u0026lt;=15;i++){ push(\u0026amp;stack,i); printStack(stack); } //remove 10 items for(j=0;j\u0026lt;10;j++){ //print poped value printf(\u0026quot;\\n%d poped\\n\u0026quot;,pop(\u0026amp;stack)); printStack(stack); } return 0; } {% endhighlight %}  ","permalink":"https://zkhan.in/posts/draft/dynamic-stack-in-c/","summary":"Typically stacks are like arrays, the difference is in a stack addition and deletion operations are performed from one end, this end is called top.\nLet\u0026rsquo;s have a look at stack terminology\n###Top A pointer to top most item is called top of the stack, all operations are performed on top of the stack.\n###Push Pushing a item into stack means inserting a new item to the top of stack.","title":"Stack Implementation in C"},{"content":"","permalink":"https://zkhan.in/posts/draft/doubly-linked-list/","summary":"","title":"Doubly Linked List"}]