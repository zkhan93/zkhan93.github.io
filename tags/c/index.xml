<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>c on Zeeshan Khan</title><link>https://zkhan.in/tags/c/</link><description>Recent content in c on Zeeshan Khan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jun 2016 05:53:34 +0000</lastBuildDate><atom:link href="https://zkhan.in/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Factorial in C using Character array</title><link>https://zkhan.in/posts/c/factorial-in-c-using-array/</link><pubDate>Wed, 15 Jun 2016 05:53:34 +0000</pubDate><guid>https://zkhan.in/posts/c/factorial-in-c-using-array/</guid><description>Hey Guys, wondering why I am here once again with this &amp;ldquo;factorial&amp;rdquo; thing? You will get to know it in no time..just keep reading!Let&amp;rsquo;s calculate some of the factorials:
1! = 12! = 23! = 64! = 245! = 1206! = 720
well there is no problem, isn&amp;rsquo;t it?Continue then&amp;hellip;
7! = 50408! = 40320
Now let&amp;rsquo;s look at 21! It is 51090942171709440000
Here comes the problem, in languages like C we need to keep an eye on the size of the variables.</description></item><item><title>Factorial in C</title><link>https://zkhan.in/posts/c/factorial-in-c/</link><pubDate>Wed, 01 Jun 2016 04:26:00 +0000</pubDate><guid>https://zkhan.in/posts/c/factorial-in-c/</guid><description>Hey! Today i am gonna show you how to calculate factorial of a number. The code below depicts the basic methodology of how to calculate factorial of a number.
{% highlight c linenos %}
include&amp;lt;stdio.h&amp;gt; void factorial(int number){ int i; long long int factorial=1; for ( i = number ; i &amp;gt; 0 ; i&amp;ndash; ) factorial*=i; // Printing the factorial of the number **/ printf(&amp;ldquo;Factorial of %d = %lld&amp;rdquo;,number,factorial); return 0; }</description></item><item><title>Linked List in C</title><link>https://zkhan.in/posts/c/linked-list-in-c/</link><pubDate>Mon, 23 Nov 2015 15:24:00 +0000</pubDate><guid>https://zkhan.in/posts/c/linked-list-in-c/</guid><description>First let&amp;rsquo;s get familiar with some basic terminologies used in linked list.
A linked list is a type of array in which each elements points to the next element. Each element in the list is called a node The very first node of the list is called the root node or head of the list. Linked list is represented only by the root node i.e., we store only the pointer to the root node.</description></item><item><title>Faster Input Scan Method in C</title><link>https://zkhan.in/posts/c/fast-input-scan-method-in-c/</link><pubDate>Mon, 26 Jan 2015 08:03:44 +0000</pubDate><guid>https://zkhan.in/posts/c/fast-input-scan-method-in-c/</guid><description>Sometimes we need to scan input really fast like when we are participating in coding competitions like codechef or SPOJ where the time limit is very strict and inputs are large, we can save some time by adopting faster scanning methods.
We can achieve our gaol using getchar_unlocked function.
code below scans 100000 integers and has two different methods one is scan_normal() this will scan integers using standard scanf() function and the other one is scan_fast() this scan integers using getchar_unlocked function, we will execute the program twice one for each method mark the time taken for execution to evaluate the performance.</description></item><item><title>File Handling in C</title><link>https://zkhan.in/posts/c/file-hadling-in-c/</link><pubDate>Sat, 03 Jan 2015 02:11:00 +0000</pubDate><guid>https://zkhan.in/posts/c/file-hadling-in-c/</guid><description>&lt;p>The following program demonstrate how we to perform read and write operations on files,&lt;/p>
&lt;p>We can create and open a file &lt;code>w+&lt;/code> (write plus) mode, this will open a file if it exists otherwise create a new file and open it in write mode&lt;/p></description></item><item><title>Dynamic array in C</title><link>https://zkhan.in/posts/c/dynamic-array-in-c/</link><pubDate>Fri, 02 Jan 2015 07:57:00 +0000</pubDate><guid>https://zkhan.in/posts/c/dynamic-array-in-c/</guid><description>Dynamic array is a array that has a fixed number of items on it, but the space required for data storage is alloted at runtime on data input.
The code below will demonstrate how we can use dynamic array in C {% highlight c linenos %}
include&amp;lt;stdio.h&amp;gt; include&amp;lt;stdlib.h&amp;gt; int main() { int arr[10], i; printf(&amp;ldquo;Enter 10 numbers\n&amp;rdquo;); for(i = 0; i &amp;lt; 10; i++){ //asking for space to store an int arr[i] = (int) malloc(sizeof(int)); scanf(&amp;quot;%d&amp;quot;, arr[i]); } printf(&amp;ldquo;the array you entered is &amp;ldquo;); for(i = 0; i &amp;lt; 10; i++){ printf(&amp;quot;%d &amp;ldquo;, *arr[i]); //returning memory to system free(arr[i]); } printf(&amp;quot;\n&amp;rdquo;); return 0; } {% endhighlight %}</description></item><item><title>Pointers in C</title><link>https://zkhan.in/posts/c/pointers-in-c/</link><pubDate>Fri, 02 Jan 2015 07:39:00 +0000</pubDate><guid>https://zkhan.in/posts/c/pointers-in-c/</guid><description>Pointers are variables that stores the reference (address) of a data value, datatype of pointers represent what kind of values they can hold reference of, however, a pointer of type void can hold reference of any datatype, but explicitly type casting is required to use them.
The code below will demonstrate how we can use pointers in C {% highlight c linenos %}
include&amp;lt;stdio.h&amp;gt; int main(){ int *pnum, num; printf(&amp;ldquo;Enter a number\n&amp;rdquo;); scanf(&amp;quot;%d&amp;quot;, &amp;amp;num); pnum = # // now you can modify the value from pnum as well as num.</description></item><item><title>Array in C</title><link>https://zkhan.in/posts/c/array-in-c/</link><pubDate>Thu, 01 Jan 2015 11:04:00 +0000</pubDate><guid>https://zkhan.in/posts/c/array-in-c/</guid><description>Arrays in C are collection of values that have same data types.
The code below initializes and assigns values to an each position in an array
{% highlight c linenos %}
include&amp;lt;stdio.h&amp;gt; int main(){ int arr[10]; int i;
printf(&amp;quot;Enter 10 numbers\n&amp;quot;); for(i=0;i&amp;lt;10;i++){ scanf(&amp;quot;%d&amp;quot;,&amp;amp;arr[i]); } printf(&amp;quot;the array you entered is\n&amp;quot;); for(i=0;i&amp;lt;10;i++){ printf(&amp;quot;%d &amp;quot;,arr[i]); } printf(&amp;quot;\n&amp;quot;); return 0; }
{% endhighlight %}
Output: {% highlight c linenos%} Enter 10 numbers 1 2 3 4 5 6 7 8 9 10 the array you entered is 1 2 3 4 5 6 7 8 9 10 {% endhighlight %}</description></item><item><title>Bitwise operations in C</title><link>https://zkhan.in/posts/c/bitwise-operator-in-c/</link><pubDate>Thu, 01 Jan 2015 04:26:00 +0000</pubDate><guid>https://zkhan.in/posts/c/bitwise-operator-in-c/</guid><description>Bitwise operators in C are
&amp;amp; AND Operator | OR Operator ~ NOT Operator ^ XOR Operator The code below demonstrate common bitwise operations in c {% highlight c linenos %}
include&amp;lt;stdio.h&amp;gt; int main(){ int a, b, option, res; printf(&amp;ldquo;Enter a and b\n&amp;rdquo;); scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;a, &amp;amp;b); do{ printf(&amp;ldquo;MENU\n 1.AND\n 2.OR\n 3.NOT \n 4.XOR\n 0.Exit\n&amp;rdquo;); printf(&amp;ldquo;Enter choice: &amp;ldquo;); scanf(&amp;quot;%d&amp;rdquo;, &amp;amp;option); switch(option){ case 1: res = a &amp;amp; b; printf(&amp;quot;%d AND %d = %d\n&amp;rdquo;, a, b, res); break; case 2: res = a | b; printf(&amp;quot;%d OR %d = %d\n&amp;quot;, a, b, res); break; case 3: res = ~a; printf(&amp;ldquo;NOT of %d = %d\n&amp;rdquo;, a, res); res = ~b; printf(&amp;ldquo;NOT of %d = %d\n&amp;rdquo;, b, res); break; case 4: res = a ^ b; printf(&amp;quot;%d XOR %d = %d\n&amp;quot;, a, b, res); break; default: break; } printf(&amp;quot;\n&amp;quot;); }while(option); return 0; } {% endhighlight %}</description></item><item><title>Swap Two Numbers in C</title><link>https://zkhan.in/posts/c/swap-two-numbers-in-c/</link><pubDate>Tue, 30 Dec 2014 04:26:00 +0000</pubDate><guid>https://zkhan.in/posts/c/swap-two-numbers-in-c/</guid><description>Code below swaps two numbers without using a third variable {% highlight c linenos %}
include&amp;lt;stdio.h&amp;gt; int swap(int* a, int *b){ // swapping values using match trick *a = *a + *b; *b = *a - *b; *a = *a - *b; return 0; } int main(){ int a, b; printf(&amp;ldquo;Enter two numbers&amp;rdquo;); scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;a, &amp;amp;b); printf(&amp;ldquo;a=%d, b=%d&amp;rdquo;, a, b); swap(&amp;amp;a, &amp;amp;b); printf(&amp;ldquo;a=%d, b=%d&amp;rdquo;, a, b); return 0; } {% endhighlight %}</description></item><item><title>Add Two Numbers in C</title><link>https://zkhan.in/posts/c/add-two-numbers-in-c/</link><pubDate>Sun, 28 Dec 2014 20:04:04 +0000</pubDate><guid>https://zkhan.in/posts/c/add-two-numbers-in-c/</guid><description>To add two numeric values in C
{% highlight c linenos %} #include&amp;lt;stdio.h&amp;gt;
int main(){ float a, b; printf(&amp;ldquo;Enter two numbers\n&amp;rdquo;); scanf(&amp;quot;%f %f&amp;quot;,&amp;amp;a,&amp;amp;b); printf(&amp;ldquo;sum of %f and %f is %f&amp;rdquo;,a,b,a+b); return 0; } {% endhighlight %}
Output: {% highlight text %} Enter two numbers 12 34 sum of 12.000000 and 34.000000 is 46.000000 {% endhighlight %}</description></item></channel></rss>